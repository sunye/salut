package org.atlanmod.salut.record;

import java.util.Objects;
import org.atlanmod.commons.annotation.VisibleForTesting;
import org.atlanmod.commons.log.Log;
import org.atlanmod.salut.io.ByteArrayReader;
import org.atlanmod.salut.io.ByteArrayWriter;
import org.atlanmod.salut.io.UnsignedShort;

public class Header {

    /**
     *
     * From [The TCP/IP Guide http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm]:
     *
     * Identifier: A 16-bit identification field generated by the device that creates the DNS query.
     * It is copied by the server into the response, so it can be used by that device to match that
     * query to the corresponding reply received from a DNS server. This is used in a manner similar
     * to how the Identifier field is used in many of the ICMP message types.
     *
     * From [RFC6762]:
     *
     * In multicast query messages, the Query Identifier SHOULD be set to zero on transmission.
     *
     * In multicast responses, including unsolicited multicast responses, the Query Identifier
     * MUST be set to zero on transmission, and MUST be ignored on reception.
     *
     * In legacy unicast response messages generated specifically in response to a particular
     * (unicast or multicast) query, the Query Identifier MUST match the ID from the query message.
     *
     */
    private final UnsignedShort id;

    /**
     * Flags and codes.
     */
    private final QRFlag flags;

    /**
     * Question Count: Specifies the number of questionRecordCount in the Question section of the
     * message.
     */
    private final UnsignedShort questionRecordCount;

    /**
     * Answer AbstractRecord Count: Specifies the number of resource records in the Answer section
     * of the message.
     */
    private final UnsignedShort answerRecordCount;

    /**
     * Authority AbstractRecord Count: Specifies the number of resource records in the Authority
     * section of the message.
     */
    private final UnsignedShort authorityRecordCount;

    /**
     * Additional AbstractRecord Count: Specifies the number of resource records in the Additional
     * section of the message.
     */
    private final UnsignedShort additionalRecordCount;

    /**
     * Creates a new m-dns header
     *
     * @param id
     * @param flags
     * @param questionRecordCount
     * @param answerRecordCount
     * @param authorityRecordCount
     * @param additionalRecordCount
     */
    private Header(UnsignedShort id, QRFlag flags, UnsignedShort questionRecordCount,
        UnsignedShort answerRecordCount, UnsignedShort authorityRecordCount,
        UnsignedShort additionalRecordCount) {
        this.id = id;
        this.flags = flags;
        this.questionRecordCount = questionRecordCount;
        this.answerRecordCount = answerRecordCount;
        this.authorityRecordCount = authorityRecordCount;
        this.additionalRecordCount = additionalRecordCount;
    }

    /**
     * Creates a new header from a byte array buffer.
     *
     * @param buffer
     * @return a new Header instance
     */
    public static Header fromByteBuffer(ByteArrayReader buffer) {
        UnsignedShort id = buffer.getUnsignedShort();
        QRFlag flags = QRFlag.fromUnsignedShort(buffer.getUnsignedShort());
        UnsignedShort questions = buffer.getUnsignedShort();
        UnsignedShort answers = buffer.getUnsignedShort();
        UnsignedShort authorityRR = buffer.getUnsignedShort();
        UnsignedShort additionalRR = buffer.getUnsignedShort();

        Header newHeader = new Header(id, flags, questions, answers, authorityRR, additionalRR);

        Log.info("Parsed header: {0}", newHeader);
        return newHeader;
    }

    /**
     * Converts the header's contents into a String
     *
     * @return String representing the header.
     */
    @Override
    public String toString() {
        return "Header{" +
            "id=" + id +
            ", flags=" + flags.toString() +
            ", questionRecordCount=" + questionRecordCount +
            ", answerRecordCount=" + answerRecordCount +
            ", authorityRecordCount=" + authorityRecordCount +
            ", additionalRecordCount=" + additionalRecordCount +
            '}';
    }

    @Override
    public boolean equals(Object other) {
        //@formatter:off
        if (this == other) {return true;}
        if (!(other instanceof Header)) {return false;}
        //@formatter:on

        Header that = (Header) other;
        return Objects.equals(id, that.id) &&
            Objects.equals(flags, that.flags) &&
            Objects.equals(questionRecordCount, that.questionRecordCount) &&
            Objects.equals(answerRecordCount, that.answerRecordCount) &&
            Objects.equals(authorityRecordCount, that.authorityRecordCount) &&
            Objects.equals(additionalRecordCount, that.additionalRecordCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, flags, questionRecordCount, answerRecordCount, authorityRecordCount,
            additionalRecordCount);
    }

    public int id() {
        return id.intValue();
    }

    /**
     * The number of question records.
     *
     * @return int
     */
    public int questionRecordCount() {
        return questionRecordCount.intValue();
    }

    /**
     * The number of answer records.
     *
     * @return int
     */
    public int answerRecordCount() {
        return answerRecordCount.intValue();
    }

    /**
     * The number of authority records.
     *
     * @return int
     */
    public int authorityRecordCount() {
        return authorityRecordCount.intValue();
    }

    /**
     * The number of additional records.
     *
     * @return the count of additional records.
     */
    public int additionalRecordCount() {
        return additionalRecordCount.intValue();
    }

    public QRFlag flags() {
        return flags;
    }

    /**
     * Reads the QR Flag and returns true if it is set to 1 and false otherwise.
     *
     * @return true, if this is a header of a Query
     */
    public boolean isQuery() {
        return flags.isQuery();
    }

    /**
     * Writes the contents of this header to a byte array buffer.
     *
     * @param buffer a byte array buffer where the header will be written.
     */
    public void writeOn(ByteArrayWriter buffer) {
        buffer.writeUnsignedShort(id);
        buffer.writeUnsignedShort(flags.toUnsignedShort());
        buffer.writeUnsignedShort(questionRecordCount);
        buffer.writeUnsignedShort(answerRecordCount);
        buffer.writeUnsignedShort(authorityRecordCount);
        buffer.writeUnsignedShort(additionalRecordCount);
    }

    @VisibleForTesting
    public static Header createHeader(UnsignedShort id, QRFlag flags, UnsignedShort questionRecordCount,
        UnsignedShort answerRecordCount, UnsignedShort authorityRecordCount,
        UnsignedShort additionalRecordCount) {
        return new Header(id, flags, questionRecordCount, answerRecordCount, authorityRecordCount,
            additionalRecordCount);
    }
}
